# -*- coding: utf-8 -*-
"""output_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EIBhyDbqpQ1Vjr63L1XSoJP7c9Ek_tRb
"""
import matplotlib;
import netpyne
from netpyne import sim
from netpyne.analysis.utils import colorList

matplotlib.rcParams.update({'font.size': 16})
import numpy as np
import matplotlib.pyplot as plt


def test(electrode, time_range, i, freq, folder_name):
    netpyne.analysis.mapping.plotLFP(electrodes=electrode, timeRange=time_range, pop=None, plots=['timeSeries'],
                                     figSize=(8, 4), minFreq=10, maxFreq=80,
                                     saveFig=f"{folder_name}_*/{freq}Hz_{folder_name}_{i}_LFP_Time.png")
    netpyne.analysis.mapping.plotLFP(electrodes=electrode, timeRange=time_range, pop=None, plots=['PSD'],
                                     figSize=(8, 4), minFreq=10, maxFreq=80,
                                     saveFig=f"{folder_name}_*/{freq}Hz_{folder_name}_{i}_LFP_PSD.png")
    netpyne.analysis.mapping.plotLFP(electrodes=electrode, timeRange=time_range, pop=None, plots=['spectrogram'],
                                     figSize=(8, 4), minFreq=10, maxFreq=60,
                                     saveFig=f"{folder_name}_*/{freq}Hz_{folder_name}_{i}_LFP_Spectr.png")


def misc_plots(folder_name=None, freq=None, i=None):
    sim.analysis.plotDipole(showCell=False, saveFig=f"{folder_name}_*/{freq}Hz_{folder_name}_{i}_EEG_all",
                            timeRange=[2500, 5500], showPop=False)
    allpops = ['SOM2', 'PV2', 'SOM3', 'PV3', 'SOM4', 'PV4', 'SOM5A', 'PV5A', 'SOM5B', 'PV5B', 'SOM6', 'PV6']
    popColor = {}
    for i, pop in enumerate(allpops):
        popColor[pop] = colorList[i]
    sim.analysis.plotRatePSD(include=allpops, timeRange=[2500, 5500], popColors=popColor,
                             saveFig=f"{folder_name}_*/{freq}Hz_{folder_name}_{i}_pop_RatePSD.png")
    sim.analysis.plotSpikeStats(include=allpops, timeRange=[2500, 5500], dpi=100, popColors=popColor, showFig=True,
                                saveFig=f"{folder_name}_*/{freq}Hz_{folder_name}_{i}_pop_pop_SpikeStats.png")


def main_method_avg(folder_name):
    sim.load(f'v34_batch_eeg_plot_0_{folder_name}_data.pkl', instantiate=False)
    print(f"sim.allSimData.keys() : {sim.allSimData.keys()}")
    lfp_shape_data = np.asarray(sim.allSimData['LFP']).shape
    print(lfp_shape_data)

    list_of_trail = list(range(10))
    list_sum = np.zeros(lfp_shape_data)
    print(list_sum.shape)
    number_of_seed = len(list_of_trail)
    freq = ""
    if folder_name == '0':
        freq = 20
    elif folder_name == '1':
        freq = 30
    elif folder_name == '2':
        freq = 40

    for list_element in range(len(list_of_trail)):
        i = list_of_trail[list_element]
        try:
            sim.load(f'v34_batch_eeg_plot_{i}_{folder_name}_data.pkl', instantiate=False)
            print(f"sim.allSimData.keys() : {sim.allSimData.keys()}")
            # time_range = [2500, 5500]
            # test([0, 1, 12, 13], time_range, 'avg', freq, folder_name)
            list_sum += np.asarray(sim.allSimData['LFP'])
        except FileNotFoundError:
            number_of_seed -= 1
    print(list_sum.shape)
    list_avg = list_sum / number_of_seed
    print(list_avg.shape)
    sim.allSimData['LFP'] = list_avg

    layer_bounds = {'L1': 100, 'L2': 160, 'L3': 950, 'L4': 1250, 'L5A': 1334, 'L5B': 1550, 'L6': 2000}
    sim.plotting.plotCSD(spacing_u=100, hlines=True, overlay='LFP', layerBounds=layer_bounds, saveFig=True)
    plt.savefig(f"{folder_name}_*/{freq}Hz_{folder_name}_avg_CSD.png", format="png")

    time_range = [2500, 5500]
    test([0, 1, 12, 13], time_range, 'avg', freq, folder_name)

    misc_plots(folder_name, freq, 'avg')


main_method_avg("2")
main_method_avg("1")
main_method_avg("0")
